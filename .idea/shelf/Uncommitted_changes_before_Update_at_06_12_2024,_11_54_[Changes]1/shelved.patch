Index: src/domainmodel/Team.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package domainmodel;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Team {\n    private String teamName;\n    private AgeCategory ageCategory;\n    private ArrayList<Person> allSwimmers = new ArrayList<>();\n\n\n    public Team(String teamName, AgeCategory ageCategory) {\n        this.teamName = teamName;\n        this.ageCategory = ageCategory;\n        this.allSwimmers = new ArrayList<>();\n    }\n\n    public Team(String teamName) {\n        this.teamName = teamName;\n        this.allSwimmers = new ArrayList<>();\n    }\n\n    public Boolean isSenior(Person person) {\n        return person.calculateAge() >= 18;\n    }\n\n    public Boolean isJunior(Person person) {\n        return person.calculateAge() < 18;\n    }\n\n    public boolean isAgeCategoryValid(Person person) {\n        if (ageCategory == AgeCategory.JUNIOR) {\n            return isJunior(person);\n        } else if (ageCategory == AgeCategory.SENIOR) {\n            return isSenior(person);\n        }\n        return false; // For casual teams, this check is bypassed\n    }\n\n\n\n    public String getTeamName() {\n        return teamName;\n    }\n\n\n    public void addSwimmersToTeam(Member member) {\n        // Check if the swimmer is already on the team\n        if (!allSwimmers.contains(member)) {\n            // Casual teams accept all swimmers regardless of age\n            if (ageCategory == null || isAgeCategoryValid(member)) {\n                allSwimmers.add(member);\n                System.out.println(\"You have now added \" + member.getFirstName() + \" \" + member.getLastName() + \" to \" + getTeamName());\n\n                // Handle competitive swimmer logic\n                if (member instanceof CompetitiveSwimmer) {\n                    ((CompetitiveSwimmer) member).setTeam(this);\n                    System.out.println(member.getFirstName() + \" has been added to the competitive team for \" + getTeamName());\n                }\n            } else {\n                // Error: swimmer doesn't match the team's age category\n                System.out.println(\"Error: \" + member.getFirstName() + \" \" + member.getLastName() +\n                        \" does not meet the age criteria for the \" + getTeamName() + \" team.\");\n            }\n        } else {\n            // Error: swimmer is already on the team\n            System.out.println(member.getFirstName() + \" is already a part of the \" + getTeamName() + \" team.\");\n        }\n    }\n\n\n    public String displayAllMembers(){\n        String string = \"\";\n        for(Person person : allSwimmers){\n            string += person.toString() + \"\\n\";\n\n        }\n        return string;\n    }\n\n\n\n\n\n    /* Dette skal højst sandsynligt  slettes pga gamle arraylister\n\n        public void addToTeam(Person person) {\n        if (!allSwimmers.contains(person)) {\n            allSwimmers.add(person);\n            if (isJunior(person)) {\n                juniorTeam.add(person);\n            } else {\n                seniorTeam.add(person);\n            }\n        } else {\n            System.out.println(person.getFirstName() + person.getLastName() + \" is already in the team.\");\n        }\n    }\n    public void removeFromTeam(Person person) {\n        allSwimmers.remove(person);\n        juniorTeam.remove(person);\n        seniorTeam.remove(person);\n        juniorTeamCompetitive.remove(person);\n        seniorTeamCompetitive.remove(person);\n        casualSwimmers.remove(person);\n        competitiveSwimmers.remove(person);\n    }\n\n\n    public void addtoTeamCasualSwimmers(Person person){\n        casualSwimmers.add(person);\n    }\n\n    public void addtoTeamCompetitiveSwimmers(Person person){\n        competitiveSwimmers.add(person);\n    }\n\n    public void removeTeamCasualSwimmers(Person person){\n        casualSwimmers.remove(person);\n    }\n\n    public void removeTeamCompetetiveSwimmers(Person person){\n        competitiveSwimmers.remove(person);\n    }\n*/\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/domainmodel/Team.java b/src/domainmodel/Team.java
--- a/src/domainmodel/Team.java	(revision dc75669d40969fd145def0aff920e2329d25fc6b)
+++ b/src/domainmodel/Team.java	(date 1733435536448)
@@ -4,7 +4,7 @@
 import java.util.List;
 
 public class Team {
-    private String teamName;
+    private final String teamName;
     private AgeCategory ageCategory;
     private ArrayList<Person> allSwimmers = new ArrayList<>();
 
@@ -12,7 +12,6 @@
     public Team(String teamName, AgeCategory ageCategory) {
         this.teamName = teamName;
         this.ageCategory = ageCategory;
-        this.allSwimmers = new ArrayList<>();
     }
 
     public Team(String teamName) {
@@ -37,14 +36,13 @@
         return false; // For casual teams, this check is bypassed
     }
 
-
-
     public String getTeamName() {
         return teamName;
     }
 
 
-    public void addSwimmersToTeam(Member member) {
+    //Alle svømmere kommer på et hold, men Konkurrence svømmere ved at de er.
+    public void addSwimmersToTeam(CompetitiveSwimmer member) {
         // Check if the swimmer is already on the team
         if (!allSwimmers.contains(member)) {
             // Casual teams accept all swimmers regardless of age
@@ -68,16 +66,31 @@
         }
     }
 
-
-    public String displayAllMembers(){
-        String string = "";
-        for(Person person : allSwimmers){
-            string += person.toString() + "\n";
+//    public String displayAllMembers(){
+//        String string = "";
+//        for(Person person : allSwimmers){
+//            string += person.toString() + "\n";
+//
+//        }
+//        return string;
+//    }
 
+    public void printAllSwimmers() {
+        System.out.println("Team: " + teamName);
+        System.out.println("Team: " + teamName);
+        for (Person swimmer : allSwimmers) {
+            System.out.println("- " + swimmer.getFirstName() + " " + swimmer.getLastName());
         }
-        return string;
     }
 
+    @Override
+    public String toString() {
+        return "Team{" +
+                "teamName='" + teamName + '\'' +
+                ", ageCategory=" + (ageCategory != null ? ageCategory : "CASUAL") +
+                ", swimmerCount=" + allSwimmers.size() +
+                '}';
+    }
 
 
 
Index: src/ui/UserInterface.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ui;\n\nimport datasource.Controller;\nimport domainmodel.*;\nimport domainmodel.AgeCategory;\nimport domainmodel.MembershipStatus;\n\nimport java.time.LocalDate;\nimport java.util.Comparator;\nimport java.util.InputMismatchException;\nimport java.util.List;\nimport java.util.Scanner;\n\n\npublic class UserInterface {\n   Controller controller = new Controller();\n   Scanner scanner = new Scanner(System.in);\n\n\n\n    // Startmenu der gør brugeren kan komme ind på andre menuer bla administrivemenu osv.\n    public void startMenu() {\n        boolean menuRunning = true;\n        while (menuRunning) {\n            greetingsMSG();\n            int userResponse = scanner.nextInt();\n            scanner.nextLine(); // Consume newline\n\n            switch (userResponse) {\n                case 1 -> administrativeMenu();\n                case 2 -> bookingAndTrainingMenu();\n                case 3 -> membershipMenu();\n                case 4 -> {\n                    System.out.println(\"Exiting program...\");\n                    menuRunning = false;\n                }\n                default -> System.out.println(\"Invalid option. Please try again.\");\n            }\n        }\n    }\n\n    // Administrive menu, with administrive abilities\n    public void administrativeMenu() {\n        boolean administrativeMenuRunning = true;\n        while (administrativeMenuRunning) {\n            System.out.println(\"\\n=== Administrative Menu ===\");\n            System.out.println(\"1. Add members from existing teams\");\n            System.out.println(\"2. Remove existing members\");\n            System.out.println(\"3. Edit info on members\");\n            System.out.println(\"4. Show member overview\");\n            System.out.println(\"5. Exit menu\");\n            int userResponse = scanner.nextInt();\n            scanner.nextLine(); // Consume newline\n\n\n            switch (userResponse) {\n                case 1 -> {\n                    System.out.println(\"Add members from existing teams\");\n                    addNewMember();\n                }\n                case 2 -> {\n                    System.out.println(\"Remove existing members\");\n                    String memberId = scanner.nextLine(); // Indhent ID fra brugeren\n                    removeMember(memberId); // Kald metoden til at fjerne medlemmet\n                }\n                case 3 -> {\n                    System.out.println(\"What is the users member ID\");\n                    String memberID = scanner.nextLine();\n                    administatorEditInfo();\n                }\n                case 4 -> showMemberOverviewMenu();\n                case 5 -> administrativeMenuRunning = false;\n                default -> System.out.println(\"Invalid option. Please try again.\");\n            }\n        }\n    }\n\n    // BookingAndTrainingMenu\n    public void bookingAndTrainingMenu() {\n        boolean bookingAndTrainingMenuRunning = true;\n        while (bookingAndTrainingMenuRunning) {\n            System.out.println(\"\\n=== Booking and Training Menu ===\");\n            System.out.println(\"1. See schedule of the day\");\n            System.out.println(\"2. Edit schedule as a trainer\");\n            System.out.println(\"3. Cancellation of training or booking\");\n            System.out.println(\"4. Exit menu\");\n\n            int userResponse = scanner.nextInt();\n            scanner.nextLine();\n\n            switch (userResponse) {\n                case 1 -> System.out.println(\"See schedule of the day\");\n                case 2 -> System.out.println(\"Edit schedule as a trainer\");\n                case 3 -> System.out.println(\"Cancelation of training or booking\");\n                case 4 -> bookingAndTrainingMenuRunning = false;\n                default -> System.out.println(\"Invalid option. Please try again.\");\n            }\n        }\n    }\n\n    public void membershipMenu() {\n        boolean membershipMenuRunning = true;\n        while (membershipMenuRunning) {\n            System.out.println(\"\\n=== Membership Menu ===\");\n            System.out.println(\"1. See membership details\");\n            System.out.println(\"2. Edit membership details and status\");\n            System.out.println(\"3. Exit menu\");\n\n            int userResponse = scanner.nextInt();\n            scanner.nextLine();\n\n            switch (userResponse) {\n                case 1 -> {\n                    System.out.println(\"Write your member id\");\n                    String userMemberID = scanner.nextLine();\n                    showMemberInfo(userMemberID);\n                }\n                case 2 -> {\n                    System.out.println(\"Edit membership details and status\");\n                    editMember();\n                }\n                case 3 -> membershipMenuRunning = false;\n                default -> System.out.println(\"Invalid option. Please try again.\");\n            }\n        }\n    }\n\n\n    private void showMemberOverviewMenu() {\n        boolean overviewMenuRunning = true;\n        while (overviewMenuRunning) {\n            System.out.println(\"\\n=== Member Overview ===\");\n            System.out.println(\"1. View all members\");\n            System.out.println(\"2. View team members\");\n            System.out.println(\"3. View competitive team members\"); // nyt implementering\n            System.out.println(\"4. View competitive swimmers sorted by discipline\"); // nyt implementering\n            System.out.println(\"0. Back to main menu\");\n            System.out.print(\"Enter your choice: \");\n\n            int choice = scanner.nextInt();\n            scanner.nextLine();\n\n            switch (choice) {\n                 case 1 -> controller.displayAllMembers();\n                case 2 -> displayAllTeamMembers();\n                // case 3 - > view all comp members by team\n                // case 4 ->  CompetitiveSwimmer.printAllCompSwimmersBestDiscipline();\n                case 0 -> overviewMenuRunning = false;\n                default -> System.out.println(\"Invalid choice. Please try again.\");\n            }\n        }\n    }\n\n    private void displayAllTeamMembers() {\n        System.out.println(\"\\n1. Junior Team\");\n        System.out.println(\"2. Senior Team\");\n        System.out.print(\"Select team: \");\n\n        int choice = scanner.nextInt();\n        scanner.nextLine(); // Consume newline\n\n        Team selectedTeam = switch (choice) {\n            case 1 -> new Team(\"Junior Team\", AgeCategory.JUNIOR);\n            case 2 -> new Team(\"Senior Team\", AgeCategory.SENIOR);\n            default -> {\n                System.out.println(\"Invalid team selection\");\n                yield null;\n            }\n        };\n\n\n        if (selectedTeam != null) {\n            List<CompetitiveSwimmer> teamMembers = controller.getTeamMembers(selectedTeam);\n            System.out.println(\"\\n=== Team \" + selectedTeam.getTeamName() + \" Members ===\");\n            printHeaderLine();\n\n            for (CompetitiveSwimmer swimmer : teamMembers) {\n                printSwimmerInfo(swimmer);\n            }\n            System.out.println(\"Total Team Members: \" + teamMembers.size());\n        }\n        waitForEnter();\n    }\n\n\n/*\n    // Displays competitive members by team\n    private void displayAllCompetitiveTeamMembers() {\n        System.out.println(\"\\n1. Junior Team\");\n        System.out.println(\"2. Senior Team\");\n        System.out.print(\"Select team: \");\n\n        int choice = scanner.nextInt();\n        scanner.nextLine(); // Consume newline\n\n        String teamName = null;\n\n\n        if (choice == 1){\n            teamName == \"Junior Team\";\n        }\n    }\n */\n\n\n\n\n    // Method to greet the user, and save sout's.\n    private void greetingsMSG() {\n        System.out.println(\"\\n=== Welcome To Your Swimming Park System ===\");\n        System.out.println(\"1. Administrative data\");\n        System.out.println(\"2. Booking and training\");\n        System.out.println(\"3. Membership management\");\n        System.out.println(\"4. Exit\");\n        System.out.print(\"Enter your choice: \");\n    }\n\n\n\n    //\n    private void printHeaderLine() {\n        System.out.printf(\"%-10s %-15s %-15s %-5s %-10s %-15s%n\",\n                \"ID\", \"First Name\", \"Last Name\", \"Age\", \"Status\", \"Team\");\n        System.out.println(\"=\".repeat(70));\n    }\n\n    public void printSwimmerInfo(CompetitiveSwimmer swimmer) {\n        System.out.printf(\"%-10s %-15s %-15s %-5d %-10s %-15s %s%n\",\n                swimmer.getMemberID(),\n                swimmer.getFirstName(),\n                swimmer.getLastName(),\n                swimmer.calculateAge(),\n                swimmer.getMembershipStatus(),\n                swimmer.getTeam().getTeamName(),\n                String.join(\", \", swimmer.getDisciplines()));\n    }\n\n    public Member printMemberInfo(Member member) {\n        System.out.printf(\"%-10s %-15s %-15s %-5d %-10s %-15s%n\",\n                member.getMemberID(),\n                member.getFirstName(),\n                member.getLastName(),\n                member.calculateAge(),\n                member.getMembershipStatus(),\n                \"No Team\");\n        return member;\n    }\n\n\n    private void removeMember(String memberID) {\n\n        System.out.println(\"enter the a membersID to remove the member\");\n\n        List<Person> members = controller.getAllMembers();\n        Member toRemove = null;\n\n        for (Person person : members) {\n            if (person instanceof Member && ((Member) person).getMemberID().equals(memberID)) {\n                toRemove = (Member) person;\n                break;\n            }\n        }\n        if (toRemove != null && members.remove(toRemove)) {\n            members.remove(memberID);\n            System.out.println(\"Member removed successfully: \" + toRemove.getFirstName() + \" \" + toRemove.getLastName());\n        } else {\n            System.out.println(\"Member does not exist\");\n        }\n    }\n\n    private void addNewMember() {\n        System.out.println(\"------------------------\");\n        System.out.println(\"\\nEnter first name: \");\n        String firstName = scanner.nextLine();\n        System.out.println(\"First name: \" + firstName);\n\n        System.out.println(\"\\nEnter last name: \");\n        String lastName = scanner.nextLine();\n        System.out.println(\"Last name: \" + lastName);\n\n        LocalDate dob = null;\n        while (dob == null) {\n            System.out.println(\"\\nEnter date of birth (YYYY-MM-DD): \");\n            try {\n                dob = LocalDate.parse(scanner.nextLine());\n                System.out.println(\"Date of birth: \" + dob);\n            } catch (Exception e) {\n                System.out.println(\"An error has occured: \" + e.getMessage() + \" - Please try again\");\n            }\n        }\n\n        System.out.println(\"\\nEnter email: \");\n        String email = scanner.nextLine();\n        while (!email.contains(\"@\") && !email.contains(\".\")) {\n            if (email.contains(\"@\")) {\n                System.out.println(\"Email: \" + email);\n            } else {\n                System.out.println(\"Please enter a valid email\");\n                email = scanner.nextLine();\n            }\n        }\n\n        System.out.println(\"\\nEnter phone number: \");\n        String phone = scanner.nextLine();\n        System.out.println(\"Phone number: \" + phone);\n\n        System.out.println(\"\\nEnter address: \");\n        String address = scanner.nextLine();\n        System.out.println(\"address: \" + address);\n\n        MembershipStatus status = null;\n        while (status == null) {\n            try {\n                System.out.println(\"\\nEnter membership status *Enter Passive/Active*: \");\n                status = MembershipStatus.valueOf(scanner.nextLine().toUpperCase());\n                System.out.println(\"membership stauts: \" + status);\n            } catch (IllegalArgumentException e) {\n                System.out.println(\"An error has occured: \" + e.getMessage() + \" - Please try again\");\n            }\n        }\n\n\n        String memberId = \"ID\" + (controller.getAllMembers().size() + 1);\n\n        Member newMember = new Member(firstName, lastName, dob, email, phone, address, memberId, status);\n        // Ændre til nye add metode\n         controller.addMemberToTeam(newMember);\n\n        System.out.println(\"Member added successfully: \" + newMember.getFirstName() + \" \" + newMember.getLastName());\n\n    }\n\n    private void waitForEnter() {\n        System.out.println(\"\\nPress Enter to continue...\");\n        scanner.nextLine();\n    }\n\n    public Member showMemberInfo(String memberID) {\n        List<Person> Members = controller.getAllMembers();\n        Member toSearch = null;\n        for (Person person : Members) {\n            if (person instanceof Member && ((Member) person).getMemberID().equals(memberID)) ;{\n                toSearch = (Member) person;\n                break;\n            }\n        }\n        if (toSearch != null) {\n            System.out.println(printMemberInfo(toSearch));\n        } else {\n            System.out.println(\"Member does not exist\");\n        }\n        return null;\n    }\n\n    public Member administatorEditInfo() {\n        System.out.println(\"\\n=== Edit Member Information ===\");\n        System.out.println(\"Enter member ID to edit: \");\n        String memberID = scanner.nextLine();\n\n        List<Person> members = controller.getAllMembers();\n        Member memberToEdit = null;\n\n        // Find the member\n        for (Person person : members) {\n            if (person instanceof Member && ((Member) person).getMemberID().equals(memberID)) {\n                memberToEdit = (Member) person;\n                break;\n            }\n        }\n\n        if (memberToEdit == null) {\n            System.out.println(\"Member not found.\");\n            return null;\n        }\n\n        boolean editing = true;\n        while (editing) {\n            System.out.println(\"\\nCurrent Member Information:\");\n            printMemberInfo(memberToEdit);\n\n            System.out.println(\"\\nWhat would you like to edit?\");\n            System.out.println(\"1. First Name (Current: \" + memberToEdit.getFirstName() + \")\");\n            System.out.println(\"2. Last Name (Current: \" + memberToEdit.getLastName() + \")\");\n            System.out.println(\"3. Email (Current: \" + memberToEdit.getEmail() + \")\");\n            System.out.println(\"4. Phone Number (Current: \" + memberToEdit.getPhoneNumber() + \")\");\n            System.out.println(\"5. Address (Current: \" + memberToEdit.getAddress() + \")\");\n            System.out.println(\"6. MemberID(Current: \" + memberToEdit.getMemberID() + \")\");\n            System.out.println(\"7. Membership Status (Current: \" + memberToEdit.getMembershipStatus() + \")\");\n            System.out.println(\"8. Save and Exit\");\n\n            int choice = scanner.nextInt();\n            scanner.nextLine(); // Consume newline\n\n            switch (choice) {\n\n                case 1 -> {\n                    System.out.println(\"Enter new first name: \");\n                    String firstName = scanner.nextLine();\n                    memberToEdit.setFirstName(firstName);\n                    System.out.println(\"First name updated successfully.\");\n                }\n                case 2 -> {\n                    System.out.println(\"Enter new last name: \");\n                    String lastName = scanner.nextLine();\n                    memberToEdit.setLastName(lastName);\n                    System.out.println(\"Last name updated successfully.\");\n                }\n                case 3 -> {\n                    System.out.println(\"Enter new email: \");\n                    String email = scanner.nextLine();\n                    while (!email.contains(\"@\") || !email.contains(\".\")) {\n                        System.out.println(\"Please enter a valid email address: \");\n                        email = scanner.nextLine();\n                    }\n                    memberToEdit.setEmail(email);\n                    System.out.println(\"Email updated successfully.\");\n                }\n                case 4 -> {\n                    System.out.println(\"Enter new phone number: \");\n                    String phone = scanner.nextLine();\n                    memberToEdit.setPhoneNumber(phone);\n                    System.out.println(\"Phone number updated successfully.\");\n                }\n                case 5 -> {\n                    System.out.println(\"Enter new address: \");\n                    String address = scanner.nextLine();\n                    memberToEdit.setAddress(address);\n                    System.out.println(\"Address updated successfully.\");\n                }\n                case 6 -> {\n                    MembershipStatus newStatus = null;\n                    while (newStatus == null) {\n                        try {\n                            System.out.println(\"Enter new membership status (ACTIVE/PASSIVE): \");\n                            String statusInput = scanner.nextLine().toUpperCase();\n                            newStatus = MembershipStatus.valueOf(statusInput);\n                            memberToEdit.setMembershipStatus(newStatus);\n                            System.out.println(\"Membership status updated successfully.\");\n                        } catch (IllegalArgumentException e) {\n                            System.out.println(\"Invalid status. Please enter either ACTIVE or PASSIVE.\");\n                        }\n                    }\n                }\n                case 7 -> {\n                    System.out.println(\"Enter new MemberID: \");\n                    String newMemberID = scanner.nextLine();\n\n                    // Check if the new MemberID is already in use\n                    boolean idExists = false;\n                    for (Person person : members) {\n                        if (person instanceof Member && ((Member) person).getMemberID().equals(newMemberID)) {\n                            idExists = true;\n                            break;\n                        }\n                    }\n                    if (!idExists) {\n                        memberToEdit.setMemberID(newMemberID);\n                        System.out.println(\"MemberID updated successfully.\");\n                    } else {\n                        System.out.println(\"The MemberID is already in use. Please try a different one.\");\n                    }\n                }\n                case 8 -> {\n                    System.out.println(\"Changes saved successfully.\");\n                    editing = false;\n                }\n                default -> System.out.println(\"Invalid option. Please try again.\");\n            }\n        }\n        return null;\n    }\n\n    private int validateInt(){\n        while(true){\n            try {\n                return scanner.nextInt();\n            }\n            catch (InputMismatchException e)\n            {\n                System.out.println(\"Please enter a valid number\");\n                scanner.nextLine();\n            }\n        }\n    }\n\n    private void editMember() {\n        System.out.println(\"\\n=== Edit Member Information ===\");\n        System.out.println(\"Enter member ID to edit: \");\n        String memberID = scanner.nextLine();\n\n        List<Person> members = controller.getAllMembers();\n        Member memberToEdit = null;\n\n        // Find the member\n        for (Person person : members) {\n            if (person instanceof Member && ((Member) person).getMemberID().equals(memberID)) {\n                memberToEdit = (Member) person;\n                break;\n            }\n        }\n\n        if (memberToEdit == null) {\n            System.out.println(\"Member not found.\");\n            return;\n        }\n\n        boolean editing = true;\n        while (editing) {\n            System.out.println(\"\\nCurrent Member Information:\");\n            printMemberInfo(memberToEdit);\n\n            System.out.println(\"\\nWhat would you like to edit?\");\n            System.out.println(\"1. First Name (Current: \" + memberToEdit.getFirstName() + \")\");\n            System.out.println(\"2. Last Name (Current: \" + memberToEdit.getLastName() + \")\");\n            System.out.println(\"3. Email (Current: \" + memberToEdit.getEmail() + \")\");\n            System.out.println(\"4. Phone Number (Current: \" + memberToEdit.getPhoneNumber() + \")\");\n            System.out.println(\"5. Address (Current: \" + memberToEdit.getAddress() + \")\");\n            System.out.println(\"6. Membership Status (Current: \" + memberToEdit.getMembershipStatus() + \")\");\n            System.out.println(\"7. Save and Exit\");\n\n            int choice = scanner.nextInt();\n            scanner.nextLine(); // Consume newline\n\n            switch (choice) {\n                case 1 -> {\n                    System.out.println(\"Enter new email: \");\n                    String email = scanner.nextLine();\n                    while (!email.contains(\"@\") || !email.contains(\".\")) {\n                        System.out.println(\"Please enter a valid email address: \");\n                        email = scanner.nextLine();\n                    }\n                    memberToEdit.setEmail(email);\n                    System.out.println(\"Email updated successfully.\");\n                }\n                case 2 -> {\n                    System.out.println(\"Enter new phone number: \");\n                    String phone = scanner.nextLine();\n                    memberToEdit.setPhoneNumber(phone);\n                    System.out.println(\"Phone number updated successfully.\");\n                }\n                case 3 -> {\n                    System.out.println(\"Enter new address: \");\n                    String address = scanner.nextLine();\n                    memberToEdit.setAddress(address);\n                    System.out.println(\"Address updated successfully.\");\n                }\n                case 4 -> {\n                    System.out.println(\"Changes saved successfully.\");\n                    editing = false;\n                }\n                default -> System.out.println(\"Invalid option. Please try again.\");\n            }\n        }\n    }\n    public void printMSG(String msg){\n        System.out.println(msg);\n    }\n\n\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ui/UserInterface.java b/src/ui/UserInterface.java
--- a/src/ui/UserInterface.java	(revision dc75669d40969fd145def0aff920e2329d25fc6b)
+++ b/src/ui/UserInterface.java	(date 1733406047611)
@@ -141,7 +141,7 @@
             scanner.nextLine();
 
             switch (choice) {
-                 case 1 -> controller.displayAllMembers();
+                case 1 -> controller.displayAllMembers();
                 case 2 -> displayAllTeamMembers();
                 // case 3 - > view all comp members by team
                 // case 4 ->  CompetitiveSwimmer.printAllCompSwimmersBestDiscipline();
@@ -324,7 +324,7 @@
 
         Member newMember = new Member(firstName, lastName, dob, email, phone, address, memberId, status);
         // Ændre til nye add metode
-         controller.addMemberToTeam(newMember);
+        controller.addMemberToTeam(newMember);
 
         System.out.println("Member added successfully: " + newMember.getFirstName() + " " + newMember.getLastName());
 
