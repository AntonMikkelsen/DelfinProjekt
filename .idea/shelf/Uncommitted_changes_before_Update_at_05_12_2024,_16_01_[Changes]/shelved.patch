Index: src/domainmodel/Member.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package domainmodel;\n\nimport java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class Member extends Person{\n    private String memberID;\n    private Enum<MembershipStatus> membershipStatus;\n    ArrayList<Member> membersList = new ArrayList<>();\n    private double membershipFee;\n    private boolean isInArrears;\n    private SwimmerType swimmerType;\n\n\n    public Member(String firstName, String lastName, LocalDate dateOfBirth, String email, String phoneNumber, String address, String memberID, MembershipStatus membershipStatus) {\n        super(firstName, lastName, dateOfBirth, email, phoneNumber, address);\n        this.memberID = memberID;\n        this.membershipStatus = membershipStatus;\n        setSwimmerType(SwimmerType.CASUAL);\n        this.membershipFee = calculateMembershipFee(calculateAge());\n        this.isInArrears = false;\n    }\n\n    private String generateMemberIDRandom(String firstName, String lastName) {\n        Random random = new Random();\n\n        String firstInitials;\n        if (firstName.length() >= 2) {\n            firstInitials = firstName.substring(0, 2).toUpperCase();\n        } else {\n            firstInitials = firstName.substring(0, 1).toUpperCase();\n        }\n\n        String lastInitials;\n        if (lastName.length() >= 2) {\n            lastInitials = lastName.substring(0, 2).toUpperCase();\n        } else {\n            lastInitials = lastName.substring(0, 1).toUpperCase();\n        }\n\n        int randomNum = random.nextInt(8999) + 1000;\n\n        return firstInitials + lastInitials + randomNum;\n    }\n\n\n    // Bruges til at udregne rabatter, hvis medlemmer fx er over 60 år gammel eller under 18.\n           // isPassive er hvis deres medlemskab er passiv, der for koster det 500\n    public double calculateMembershipFee(int age){\n\n        // Costs of all different membership\n        final int costOfNormalSeniorMembership = 1600;\n        final int costOfJuniorMembership = 1000;\n        final int costOfPassiveMembership = 500;\n        int costOfAbove60Membership;\n\n        if (this.getMembershipStatus() == MembershipStatus.PASSIVE) {\n            return costOfPassiveMembership;\n        }\n\n        if(age < 18) {\n            return costOfJuniorMembership;\n        }\n\n        if (age >= 60) {\n            costOfAbove60Membership = (int) (1600 * 0.75);\n            return costOfAbove60Membership;\n        }\n\n        return costOfNormalSeniorMembership; //Den normale seniorpris over 18, under 60 år.\n    }\n\n\n\n    public double getMembershipFee(){\n        return membershipFee;\n    }\n\n    public boolean isInArrears(){\n        return isInArrears;\n    }\n\n    public void setInArrears(boolean inArrears){\n        isInArrears = inArrears;\n    }\n\n    public void addMember(Member members){\n        membersList.add(members);\n    }\n\n    public void removeMembers(Member members){\n        membersList.remove(members);\n    }\n\n    public void setMemberID(String memberID) {\n        this.memberID = memberID;\n    }\n\n    public String getMemberID(){\n        return memberID;\n    }\n\n    public void setMembershipStatus(MembershipStatus membershipStatus) {\n        this.membershipStatus = membershipStatus;\n    }\n\n    public void setSwimmerType(SwimmerType swimmerType) {\n        this.swimmerType = swimmerType;\n    }\n\n    // Add this getter method\n    public SwimmerType getSwimmerType() {\n        return swimmerType;\n    }\n\n    //Methods to change current membership status of member\n    public void changeMembershipToPassive(){\n        this.setMembershipStatus(MembershipStatus.PASSIVE);\n    }\n\n    public void changeMembershipToActive(){\n        this.setMembershipStatus(MembershipStatus.ACTIVE);\n    }\n\n    public Enum getMembershipStatus(){\n        return membershipStatus;\n    }\n\n    public List<String> getAllMemberDetails() {\n        List<String> memberDetails = new ArrayList<>();\n        for (Member member : membersList) {\n            memberDetails.add(member.toString()); // Eller en custom formattering\n        }\n        return memberDetails;\n    }\n\n      // toString metode der gør at teksten bliver príntet rigtigt ud\n    @Override\n    public String toString() {\n        return \"Name: \" + firstName + \" \" + lastName +\n                \", Date of Birth: \" + dateOfBirth +\n                \", Email: \" + email +\n                \", Phone: \" + phoneNumber +\n                \", Address: \" + address +\n                \", Member ID: \" + memberID +\n                \", Membership Status: \" + membershipStatus +\n                \", Membership Fee: \" + membershipFee + \", In Arrears: \" + isInArrears;\n\n\n        }\n    }\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/domainmodel/Member.java b/src/domainmodel/Member.java
--- a/src/domainmodel/Member.java	(revision 06b385c1e6361bdcf45f0e7909cda74d6b826b9b)
+++ b/src/domainmodel/Member.java	(date 1733402189093)
@@ -8,7 +8,7 @@
 public class Member extends Person{
     private String memberID;
     private Enum<MembershipStatus> membershipStatus;
-    ArrayList<Member> membersList = new ArrayList<>();
+    // ArrayList<Member> membersList = new ArrayList<>(); Skal prob slettes
     private double membershipFee;
     private boolean isInArrears;
     private SwimmerType swimmerType;
@@ -86,6 +86,7 @@
         isInArrears = inArrears;
     }
 
+    /* Skal prob slettes
     public void addMember(Member members){
         membersList.add(members);
     }
@@ -94,6 +95,8 @@
         membersList.remove(members);
     }
 
+     */
+
     public void setMemberID(String memberID) {
         this.memberID = memberID;
     }
@@ -128,14 +131,6 @@
         return membershipStatus;
     }
 
-    public List<String> getAllMemberDetails() {
-        List<String> memberDetails = new ArrayList<>();
-        for (Member member : membersList) {
-            memberDetails.add(member.toString()); // Eller en custom formattering
-        }
-        return memberDetails;
-    }
-
       // toString metode der gør at teksten bliver príntet rigtigt ud
     @Override
     public String toString() {
Index: src/ui/UserInterface.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ui;\n\nimport datasource.Controller;\nimport domainmodel.*;\nimport domainmodel.AgeCategory;\nimport domainmodel.MembershipStatus;\n\nimport java.time.LocalDate;\nimport java.util.Comparator;\nimport java.util.InputMismatchException;\nimport java.util.List;\nimport java.util.Scanner;\n\n\npublic class UserInterface {\n    private Scanner scanner;\n    private Controller controller;\n\n    public UserInterface(Controller controller) {\n        this.scanner = new Scanner(System.in);\n        this.controller = controller;\n\n    }\n\n    // Startmenu der gør brugeren kan komme ind på andre menuer bla administrivemenu osv.\n    public void startMenu() {\n        boolean menuRunning = true;\n        while (menuRunning) {\n            greetingsMSG();\n            int userResponse = scanner.nextInt();\n            scanner.nextLine(); // Consume newline\n\n            switch (userResponse) {\n                case 1 -> administrativeMenu();\n                case 2 -> bookingAndTrainingMenu();\n                case 3 -> membershipMenu();\n                case 4 -> {\n                    System.out.println(\"Exiting program...\");\n                    menuRunning = false;\n                }\n                default -> System.out.println(\"Invalid option. Please try again.\");\n            }\n        }\n    }\n\n    // Administrive menu, with administrive abilities\n    public void administrativeMenu() {\n        boolean administrativeMenuRunning = true;\n        while (administrativeMenuRunning) {\n            System.out.println(\"\\n=== Administrative Menu ===\");\n            System.out.println(\"1. Add members from existing teams\");\n            System.out.println(\"2. Remove existing members\");\n            System.out.println(\"3. Edit info on members\");\n            System.out.println(\"4. Show member overview\");\n            System.out.println(\"5. Exit menu\");\n            int userResponse = scanner.nextInt();\n            scanner.nextLine(); // Consume newline\n\n\n            switch (userResponse) {\n                case 1 -> {\n                    System.out.println(\"Add members from existing teams\");\n                    addNewMember();\n                }\n                case 2 -> {\n                    System.out.println(\"Remove existing members\");\n                    String memberId = scanner.nextLine(); // Indhent ID fra brugeren\n                    removeMember(memberId); // Kald metoden til at fjerne medlemmet\n                }\n                case 3 -> {\n                    System.out.println(\"What is the users member ID\");\n                    String memberID = scanner.nextLine();\n                    administatorEditInfo();\n                }\n                case 4 -> showMemberOverviewMenu();\n                case 5 -> administrativeMenuRunning = false;\n                default -> System.out.println(\"Invalid option. Please try again.\");\n            }\n        }\n    }\n\n    // BookingAndTrainingMenu\n    public void bookingAndTrainingMenu() {\n        boolean bookingAndTrainingMenuRunning = true;\n        while (bookingAndTrainingMenuRunning) {\n            System.out.println(\"\\n=== Booking and Training Menu ===\");\n            System.out.println(\"1. See schedule of the day\");\n            System.out.println(\"2. Edit schedule as a trainer\");\n            System.out.println(\"3. Cancellation of training or booking\");\n            System.out.println(\"4. Exit menu\");\n\n            int userResponse = scanner.nextInt();\n            scanner.nextLine();\n\n            switch (userResponse) {\n                case 1 -> System.out.println(\"See schedule of the day\");\n                case 2 -> System.out.println(\"Edit schedule as a trainer\");\n                case 3 -> System.out.println(\"Cancelation of training or booking\");\n                case 4 -> bookingAndTrainingMenuRunning = false;\n                default -> System.out.println(\"Invalid option. Please try again.\");\n            }\n        }\n    }\n\n    public void membershipMenu() {\n        boolean membershipMenuRunning = true;\n        while (membershipMenuRunning) {\n            System.out.println(\"\\n=== Membership Menu ===\");\n            System.out.println(\"1. See membership details\");\n            System.out.println(\"2. Edit membership details and status\");\n            System.out.println(\"3. Exit menu\");\n\n            int userResponse = scanner.nextInt();\n            scanner.nextLine();\n\n            switch (userResponse) {\n                case 1 -> {\n                    System.out.println(\"Write your member id\");\n                    String userMemberID = scanner.nextLine();\n                    showMemberInfo(userMemberID);\n                }\n                case 2 -> {\n                    System.out.println(\"Edit membership details and status\");\n                    editMember();\n                }\n                case 3 -> membershipMenuRunning = false;\n                default -> System.out.println(\"Invalid option. Please try again.\");\n            }\n        }\n    }\n\n\n    private void showMemberOverviewMenu() {\n        boolean overviewMenuRunning = true;\n        while (overviewMenuRunning) {\n            System.out.println(\"\\n=== Member Overview ===\");\n            System.out.println(\"1. View all members\");\n            System.out.println(\"2. View team members\");\n            System.out.println(\"3. View competitive team members\"); // nyt implementering\n            System.out.println(\"4. View competitive swimmers sorted by discipline\"); // nyt implementering\n            System.out.println(\"0. Back to main menu\");\n            System.out.print(\"Enter your choice: \");\n\n            int choice = scanner.nextInt();\n            scanner.nextLine();\n\n            switch (choice) {\n                 case 1 -> controller.displayAllMembers();\n                case 2 -> displayAllTeamMembers();\n                // case 3 - > view all comp members by team\n                // case 4 ->  CompetitiveSwimmer.printAllCompSwimmersBestDiscipline();\n                case 0 -> overviewMenuRunning = false;\n                default -> System.out.println(\"Invalid choice. Please try again.\");\n            }\n        }\n    }\n\n    private void displayAllTeamMembers() {\n        System.out.println(\"\\n1. Junior Team\");\n        System.out.println(\"2. Senior Team\");\n        System.out.print(\"Select team: \");\n\n        int choice = scanner.nextInt();\n        scanner.nextLine(); // Consume newline\n\n        Team selectedTeam = switch (choice) {\n            case 1 -> new Team(\"Junior Team\", AgeCategory.JUNIOR);\n            case 2 -> new Team(\"Senior Team\", AgeCategory.SENIOR);\n            default -> {\n                System.out.println(\"Invalid team selection\");\n                yield null;\n            }\n        };\n\n\n        if (selectedTeam != null) {\n            List<CompetitiveSwimmer> teamMembers = controller.getTeamMembers(selectedTeam);\n            System.out.println(\"\\n=== Team \" + selectedTeam.getTeamName() + \" Members ===\");\n            printHeaderLine();\n\n            for (CompetitiveSwimmer swimmer : teamMembers) {\n                printSwimmerInfo(swimmer);\n            }\n            System.out.println(\"Total Team Members: \" + teamMembers.size());\n        }\n        waitForEnter();\n    }\n\n\n/*\n    // Displays competitive members by team\n    private void displayAllCompetitiveTeamMembers() {\n        System.out.println(\"\\n1. Junior Team\");\n        System.out.println(\"2. Senior Team\");\n        System.out.print(\"Select team: \");\n\n        int choice = scanner.nextInt();\n        scanner.nextLine(); // Consume newline\n\n        String teamName = null;\n\n\n        if (choice == 1){\n            teamName == \"Junior Team\";\n        }\n    }\n */\n\n\n\n\n    // Method to greet the user, and save sout's.\n    private void greetingsMSG() {\n        System.out.println(\"\\n=== Welcome To Your Swimming Park System ===\");\n        System.out.println(\"1. Administrative data\");\n        System.out.println(\"2. Booking and training\");\n        System.out.println(\"3. Membership management\");\n        System.out.println(\"4. Exit\");\n        System.out.print(\"Enter your choice: \");\n    }\n\n\n\n    //\n    private void printHeaderLine() {\n        System.out.printf(\"%-10s %-15s %-15s %-5s %-10s %-15s%n\",\n                \"ID\", \"First Name\", \"Last Name\", \"Age\", \"Status\", \"Team\");\n        System.out.println(\"=\".repeat(70));\n    }\n\n    public void printSwimmerInfo(CompetitiveSwimmer swimmer) {\n        System.out.printf(\"%-10s %-15s %-15s %-5d %-10s %-15s %s%n\",\n                swimmer.getMemberID(),\n                swimmer.getFirstName(),\n                swimmer.getLastName(),\n                swimmer.calculateAge(),\n                swimmer.getMembershipStatus(),\n                swimmer.getTeam().getTeamName(),\n                String.join(\", \", swimmer.getDisciplines()));\n    }\n\n    public Member printMemberInfo(Member member) {\n        System.out.printf(\"%-10s %-15s %-15s %-5d %-10s %-15s%n\",\n                member.getMemberID(),\n                member.getFirstName(),\n                member.getLastName(),\n                member.calculateAge(),\n                member.getMembershipStatus(),\n                \"No Team\");\n        return member;\n    }\n\n\n    private void removeMember(String memberID) {\n\n        System.out.println(\"enter the a membersID to remove the member\");\n\n        List<Person> members = controller.getAllMembers();\n        Member toRemove = null;\n\n        for (Person person : members) {\n            if (person instanceof Member && ((Member) person).getMemberID().equals(memberID)) {\n                toRemove = (Member) person;\n                break;\n            }\n        }\n        if (toRemove != null && members.remove(toRemove)) {\n            members.remove(memberID);\n            System.out.println(\"Member removed successfully: \" + toRemove.getFirstName() + \" \" + toRemove.getLastName());\n        } else {\n            System.out.println(\"Member does not exist\");\n        }\n    }\n\n    private void addNewMember() {\n        System.out.println(\"------------------------\");\n        System.out.println(\"\\nEnter first name: \");\n        String firstName = scanner.nextLine();\n        System.out.println(\"First name: \" + firstName);\n\n        System.out.println(\"\\nEnter last name: \");\n        String lastName = scanner.nextLine();\n        System.out.println(\"Last name: \" + lastName);\n\n        LocalDate dob = null;\n        while (dob == null) {\n            System.out.println(\"\\nEnter date of birth (YYYY-MM-DD): \");\n            try {\n                dob = LocalDate.parse(scanner.nextLine());\n                System.out.println(\"Date of birth: \" + dob);\n            } catch (Exception e) {\n                System.out.println(\"An error has occured: \" + e.getMessage() + \" - Please try again\");\n            }\n        }\n\n        System.out.println(\"\\nEnter email: \");\n        String email = scanner.nextLine();\n        while (!email.contains(\"@\") && !email.contains(\".\")) {\n            if (email.contains(\"@\")) {\n                System.out.println(\"Email: \" + email);\n            } else {\n                System.out.println(\"Please enter a valid email\");\n                email = scanner.nextLine();\n            }\n        }\n\n        System.out.println(\"\\nEnter phone number: \");\n        String phone = scanner.nextLine();\n        System.out.println(\"Phone number: \" + phone);\n\n        System.out.println(\"\\nEnter address: \");\n        String address = scanner.nextLine();\n        System.out.println(\"address: \" + address);\n\n        MembershipStatus status = null;\n        while (status == null) {\n            try {\n                System.out.println(\"\\nEnter membership status *Enter Passive/Active*: \");\n                status = MembershipStatus.valueOf(scanner.nextLine().toUpperCase());\n                System.out.println(\"membership stauts: \" + status);\n            } catch (IllegalArgumentException e) {\n                System.out.println(\"An error has occured: \" + e.getMessage() + \" - Please try again\");\n            }\n        }\n\n\n        String memberId = \"ID\" + (controller.getAllMembers().size() + 1);\n\n        Member newMember = new Member(firstName, lastName, dob, email, phone, address, memberId, status);\n        // Ændre til nye add metode\n         controller.addMemberToTeam(newMember);\n\n        System.out.println(\"Member added successfully: \" + newMember.getFirstName() + \" \" + newMember.getLastName());\n\n    }\n\n    private void waitForEnter() {\n        System.out.println(\"\\nPress Enter to continue...\");\n        scanner.nextLine();\n    }\n\n    public Member showMemberInfo(String memberID) {\n        List<Person> Members = controller.getAllMembers();\n        Member toSearch = null;\n        for (Person person : Members) {\n            if (person instanceof Member && ((Member) person).getMemberID().equals(memberID)) ;{\n                toSearch = (Member) person;\n                break;\n            }\n        }\n        if (toSearch != null) {\n            System.out.println(printMemberInfo(toSearch));\n        } else {\n            System.out.println(\"Member does not exist\");\n        }\n        return null;\n    }\n\n    public Member administatorEditInfo() {\n        System.out.println(\"\\n=== Edit Member Information ===\");\n        System.out.println(\"Enter member ID to edit: \");\n        String memberID = scanner.nextLine();\n\n        List<Person> members = controller.getAllMembers();\n        Member memberToEdit = null;\n\n        // Find the member\n        for (Person person : members) {\n            if (person instanceof Member && ((Member) person).getMemberID().equals(memberID)) {\n                memberToEdit = (Member) person;\n                break;\n            }\n        }\n\n        if (memberToEdit == null) {\n            System.out.println(\"Member not found.\");\n            return null;\n        }\n\n        boolean editing = true;\n        while (editing) {\n            System.out.println(\"\\nCurrent Member Information:\");\n            printMemberInfo(memberToEdit);\n\n            System.out.println(\"\\nWhat would you like to edit?\");\n            System.out.println(\"1. First Name (Current: \" + memberToEdit.getFirstName() + \")\");\n            System.out.println(\"2. Last Name (Current: \" + memberToEdit.getLastName() + \")\");\n            System.out.println(\"3. Email (Current: \" + memberToEdit.getEmail() + \")\");\n            System.out.println(\"4. Phone Number (Current: \" + memberToEdit.getPhoneNumber() + \")\");\n            System.out.println(\"5. Address (Current: \" + memberToEdit.getAddress() + \")\");\n            System.out.println(\"6. MemberID(Current: \" + memberToEdit.getMemberID() + \")\");\n            System.out.println(\"7. Membership Status (Current: \" + memberToEdit.getMembershipStatus() + \")\");\n            System.out.println(\"8. Save and Exit\");\n\n            int choice = scanner.nextInt();\n            scanner.nextLine(); // Consume newline\n\n            switch (choice) {\n\n                case 1 -> {\n                    System.out.println(\"Enter new first name: \");\n                    String firstName = scanner.nextLine();\n                    memberToEdit.setFirstName(firstName);\n                    System.out.println(\"First name updated successfully.\");\n                }\n                case 2 -> {\n                    System.out.println(\"Enter new last name: \");\n                    String lastName = scanner.nextLine();\n                    memberToEdit.setLastName(lastName);\n                    System.out.println(\"Last name updated successfully.\");\n                }\n                case 3 -> {\n                    System.out.println(\"Enter new email: \");\n                    String email = scanner.nextLine();\n                    while (!email.contains(\"@\") || !email.contains(\".\")) {\n                        System.out.println(\"Please enter a valid email address: \");\n                        email = scanner.nextLine();\n                    }\n                    memberToEdit.setEmail(email);\n                    System.out.println(\"Email updated successfully.\");\n                }\n                case 4 -> {\n                    System.out.println(\"Enter new phone number: \");\n                    String phone = scanner.nextLine();\n                    memberToEdit.setPhoneNumber(phone);\n                    System.out.println(\"Phone number updated successfully.\");\n                }\n                case 5 -> {\n                    System.out.println(\"Enter new address: \");\n                    String address = scanner.nextLine();\n                    memberToEdit.setAddress(address);\n                    System.out.println(\"Address updated successfully.\");\n                }\n                case 6 -> {\n                    MembershipStatus newStatus = null;\n                    while (newStatus == null) {\n                        try {\n                            System.out.println(\"Enter new membership status (ACTIVE/PASSIVE): \");\n                            String statusInput = scanner.nextLine().toUpperCase();\n                            newStatus = MembershipStatus.valueOf(statusInput);\n                            memberToEdit.setMembershipStatus(newStatus);\n                            System.out.println(\"Membership status updated successfully.\");\n                        } catch (IllegalArgumentException e) {\n                            System.out.println(\"Invalid status. Please enter either ACTIVE or PASSIVE.\");\n                        }\n                    }\n                }\n                case 7 -> {\n                    System.out.println(\"Enter new MemberID: \");\n                    String newMemberID = scanner.nextLine();\n\n                    // Check if the new MemberID is already in use\n                    boolean idExists = false;\n                    for (Person person : members) {\n                        if (person instanceof Member && ((Member) person).getMemberID().equals(newMemberID)) {\n                            idExists = true;\n                            break;\n                        }\n                    }\n                    if (!idExists) {\n                        memberToEdit.setMemberID(newMemberID);\n                        System.out.println(\"MemberID updated successfully.\");\n                    } else {\n                        System.out.println(\"The MemberID is already in use. Please try a different one.\");\n                    }\n                }\n                case 8 -> {\n                    System.out.println(\"Changes saved successfully.\");\n                    editing = false;\n                }\n                default -> System.out.println(\"Invalid option. Please try again.\");\n            }\n        }\n        return null;\n    }\n\n    private int validateInt(){\n        while(true){\n            try {\n                return scanner.nextInt();\n            }\n            catch (InputMismatchException e)\n            {\n                System.out.println(\"Please enter a valid number\");\n                scanner.nextLine();\n            }\n        }\n    }\n\n    private void editMember() {\n        System.out.println(\"\\n=== Edit Member Information ===\");\n        System.out.println(\"Enter member ID to edit: \");\n        String memberID = scanner.nextLine();\n\n        List<Person> members = controller.getAllMembers();\n        Member memberToEdit = null;\n\n        // Find the member\n        for (Person person : members) {\n            if (person instanceof Member && ((Member) person).getMemberID().equals(memberID)) {\n                memberToEdit = (Member) person;\n                break;\n            }\n        }\n\n        if (memberToEdit == null) {\n            System.out.println(\"Member not found.\");\n            return;\n        }\n\n        boolean editing = true;\n        while (editing) {\n            System.out.println(\"\\nCurrent Member Information:\");\n            printMemberInfo(memberToEdit);\n\n            System.out.println(\"\\nWhat would you like to edit?\");\n            System.out.println(\"1. First Name (Current: \" + memberToEdit.getFirstName() + \")\");\n            System.out.println(\"2. Last Name (Current: \" + memberToEdit.getLastName() + \")\");\n            System.out.println(\"3. Email (Current: \" + memberToEdit.getEmail() + \")\");\n            System.out.println(\"4. Phone Number (Current: \" + memberToEdit.getPhoneNumber() + \")\");\n            System.out.println(\"5. Address (Current: \" + memberToEdit.getAddress() + \")\");\n            System.out.println(\"6. Membership Status (Current: \" + memberToEdit.getMembershipStatus() + \")\");\n            System.out.println(\"7. Save and Exit\");\n\n            int choice = scanner.nextInt();\n            scanner.nextLine(); // Consume newline\n\n            switch (choice) {\n                case 1 -> {\n                    System.out.println(\"Enter new email: \");\n                    String email = scanner.nextLine();\n                    while (!email.contains(\"@\") || !email.contains(\".\")) {\n                        System.out.println(\"Please enter a valid email address: \");\n                        email = scanner.nextLine();\n                    }\n                    memberToEdit.setEmail(email);\n                    System.out.println(\"Email updated successfully.\");\n                }\n                case 2 -> {\n                    System.out.println(\"Enter new phone number: \");\n                    String phone = scanner.nextLine();\n                    memberToEdit.setPhoneNumber(phone);\n                    System.out.println(\"Phone number updated successfully.\");\n                }\n                case 3 -> {\n                    System.out.println(\"Enter new address: \");\n                    String address = scanner.nextLine();\n                    memberToEdit.setAddress(address);\n                    System.out.println(\"Address updated successfully.\");\n                }\n                case 4 -> {\n                    System.out.println(\"Changes saved successfully.\");\n                    editing = false;\n                }\n                default -> System.out.println(\"Invalid option. Please try again.\");\n            }\n        }\n    }\n    public void printMSG(String msg){\n        System.out.println(msg);\n    }\n\n\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ui/UserInterface.java b/src/ui/UserInterface.java
--- a/src/ui/UserInterface.java	(revision 06b385c1e6361bdcf45f0e7909cda74d6b826b9b)
+++ b/src/ui/UserInterface.java	(date 1733404796642)
@@ -14,12 +14,10 @@
 
 public class UserInterface {
     private Scanner scanner;
-    private Controller controller;
+    Controller controller = new Controller();
 
-    public UserInterface(Controller controller) {
+    public UserInterface() {
         this.scanner = new Scanner(System.in);
-        this.controller = controller;
-
     }
 
     // Startmenu der gør brugeren kan komme ind på andre menuer bla administrivemenu osv.
Index: src/datasource/Controller.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package datasource;\n\nimport domainmodel.CompetitiveSwimmer;\nimport domainmodel.Member;\nimport domainmodel.Person;\nimport domainmodel.Team;\nimport ui.UserInterface;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Controller {\n    private List<Person> persons;\n    private FileHandler fileHandler;\n    private ArrayList<Team> teams;\n    private Team team;\n\n    public Controller() {\n        this.persons = new ArrayList<>();\n        this.fileHandler = new FileHandler();\n        this.teams = new ArrayList<Team>();\n    }\n\n    public void saveMembers(String fileName) {\n        ArrayList<Member> members = new ArrayList<>();\n        for (Person person : persons) {\n            if (person instanceof Member) {\n                members.add((Member) person);\n            }\n        }\n        fileHandler.saveMembersToFile(members, fileName);\n    }\n\n    public void loadMembers(String fileName) {\n        ArrayList<Member> loadedMembers = fileHandler.loadMembersFromFile(fileName);\n        persons.addAll(loadedMembers);\n    }\n\n    public List<Person> getAllPersons() {\n        return persons;\n    }\n\n    public void addPerson(Person person) {\n        persons.add(person);\n    }\n\n    public void removePerson(Person person) {\n        persons.remove(person);\n    }\n\n    public ArrayList<Team> getTeams() {\n        return teams;\n    }\n\n        public List<Person> getAllMembers() {\n            return getAllPersons();\n        }\n\n        public void addMemberToTeam(Member member) {\n             // Sørg for, at Controller har denne metode\n            team.addSwimmersToTeam(member);\n        }\n\n        public void displayAllMembers(){\n        team.displayAllMembers();\n        }\n\n        public void addTeam(Team team) {\n            teams.add(team);\n        }\n\n        public void removeTeam(Team team) {\n            teams.remove(team);\n        }\n\n\n        public void removeMembers(Member members) {\n            removePerson(members);\n        }\n\n\n\n        public List<CompetitiveSwimmer> getTeamMembers(Team team) {\n            List<Person> allPersons = getAllPersons();\n            List<CompetitiveSwimmer> teamMembers = new ArrayList<>();\n\n            for (Person person : allPersons) {\n                if (person instanceof CompetitiveSwimmer) {\n                    CompetitiveSwimmer swimmer = (CompetitiveSwimmer) person;\n                    if (swimmer.getTeam() == team) {\n                        teamMembers.add(swimmer);\n                    }\n                }\n\n            }\n            return teamMembers;\n        }\n\n\n    public List<Person> getAllMembers1() {\n        return getAllPersons();\n    }\n\n\n    private void printHeaderLine() {\n        System.out.printf(\"%-10s %-15s %-15s %-5s %-10s %-15s%n\",\n                \"ID\", \"First Name\", \"Last Name\", \"Age\", \"Status\", \"Team\");\n        System.out.println(\"=\".repeat(70));\n    }\n\n  /*  public void displayAllMembers() {\n        List<Person> members = getAllMembers1();\n\n        System.out.println(\"\\n=== All Members Overview ===\");\n        printHeaderLine();\n\n        for (Person person : members) {\n            if (person instanceof CompetitiveSwimmer) {\n                ui.printSwimmerInfo((CompetitiveSwimmer) person);\n            } else if (person instanceof Member) {\n                ui.printMemberInfo((Member) person);\n            }\n        }\n    } */\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/datasource/Controller.java b/src/datasource/Controller.java
--- a/src/datasource/Controller.java	(revision 06b385c1e6361bdcf45f0e7909cda74d6b826b9b)
+++ b/src/datasource/Controller.java	(date 1733405011511)
@@ -13,7 +13,7 @@
     private List<Person> persons;
     private FileHandler fileHandler;
     private ArrayList<Team> teams;
-    private Team team;
+
 
     public Controller() {
         this.persons = new ArrayList<>();
@@ -73,13 +73,11 @@
             teams.remove(team);
         }
 
-
         public void removeMembers(Member members) {
             removePerson(members);
         }
 
 
-
         public List<CompetitiveSwimmer> getTeamMembers(Team team) {
             List<Person> allPersons = getAllPersons();
             List<CompetitiveSwimmer> teamMembers = new ArrayList<>();
Index: src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import datasource.Controller;\nimport datasource.FileHandler;\nimport domainmodel.*;\n\n\nimport java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport ui.UserInterface;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Controller controller = new Controller();\n        UserInterface ui = new UserInterface(controller);\n        FileHandler fileHandler = new FileHandler();\n        ArrayList<Member> members = new ArrayList<>();\n\n\n        Member member1 = new Member(\"Rikke\", \"Hansen1\", LocalDate.of(1967, 06, 05), \"RikkeSnabelA\", \"50505050\", \"Vægterparken\", \"thha0006\", MembershipStatus.PASSIVE);\n        Member member2 = new Member(\"Rikke\", \"Hansen2\", LocalDate.of(1930, 06, 05), \"RikkeSnabelA\", \"50505050\", \"Vægterparken\", \"55\", MembershipStatus.ACTIVE);\n        Member member3 = new Member(\"Rikke\", \"Hansen3\", LocalDate.of(1999, 06, 05), \"RikkeSnabelA\", \"50505050\", \"Vægterparken\", \"55\", MembershipStatus.ACTIVE);\n\n        // Competitive swimmers:\n        CompetitiveSwimmer swimmer1 = new CompetitiveSwimmer(\"RikkeComp\", \"HansenComp\", LocalDate.of(1967, 06, 05), \"RikkeSnabelA\", \"50505050\", \"Vægterparken\", \"thha0006\",MembershipStatus.PASSIVE, null, null);\n        CompetitiveSwimmer swimmer2 = new CompetitiveSwimmer(\"Peter\", \"Lausen\", LocalDate.of(2019, 06, 05), \"PetLauk\", \"50503333\", \"Vægterparken\", \"thha0006\",MembershipStatus.ACTIVE, null, null);\n        CompetitiveSwimmer swimmer3 = new CompetitiveSwimmer(\"Rikmp\", \"narar\", LocalDate.of(1967, 06, 05), \"RikkeSnabelA\", \"50505050\", \"Vægterparken\", \"thha0006\",MembershipStatus.ACTIVE, null, null);\n        CompetitiveSwimmer swimmer4 = new CompetitiveSwimmer(\"Lars\", \"HansenComp\", LocalDate.of(1955, 06, 05), \"RikkeSnabelA\", \"50505050\", \"Vægterparken\", \"thha0006\",MembershipStatus.PASSIVE, null, null);\n        CompetitiveSwimmer swimmer5 = new CompetitiveSwimmer(\"Kaus\", \"KOOO\", LocalDate.of(1933, 06, 05), \"PetLauk\", \"50503333\", \"Vægterparken\", \"thha0006\",MembershipStatus.ACTIVE, null, null);\n        CompetitiveSwimmer swimmer6 = new CompetitiveSwimmer(\"NBROOO\", \"narar\", LocalDate.of(2001, 12, 04), \"RikkeSnabelA\", \"50505050\", \"Vægterparken\", \"thha0006\",MembershipStatus.ACTIVE, null, null);\n\n        // Created results for each swimmer\n        swimmer1.addResult(new Result(SwimmingDiscipline.BUTTERFLY, 50.3, LocalDate.now(), swimmer1));\n        swimmer1.addResult(new Result(SwimmingDiscipline.BACK_CRAWL, 50.4, LocalDate.now(), swimmer1));\n\n        swimmer2.addResult(new Result(SwimmingDiscipline.BREAST_STROKE, 20.3, LocalDate.now(), swimmer2));\n        swimmer2.addResult(new Result(SwimmingDiscipline.BACK_CRAWL, 54.3, LocalDate.now(), swimmer2));\n\n        swimmer3.addResult(new Result(SwimmingDiscipline.BREAST_STROKE, 51.4 , LocalDate.now(), swimmer3));\n        swimmer3.addResult(new Result(SwimmingDiscipline.BACK_CRAWL, 140.6, LocalDate.now(), swimmer3));\n        swimmer3.addResult(new Result(SwimmingDiscipline.BUTTERFLY, 25.4 , LocalDate.now(), swimmer3));\n\n        swimmer4.addResult(new Result(SwimmingDiscipline.BREAST_STROKE, 1.4 , LocalDate.now(), swimmer3));\n        swimmer4.addResult(new Result(SwimmingDiscipline.BACK_CRAWL, 14.6, LocalDate.now(), swimmer3));\n        swimmer4.addResult(new Result(SwimmingDiscipline.BUTTERFLY, 26.4 , LocalDate.now(), swimmer3));\n\n\n        swimmer5.addResult(new Result(SwimmingDiscipline.BREAST_STROKE, 50.4 , LocalDate.now(), swimmer3));\n        swimmer5.addResult(new Result(SwimmingDiscipline.BACK_CRAWL, 111.6, LocalDate.now(), swimmer3));\n        swimmer5.addResult(new Result(SwimmingDiscipline.BUTTERFLY, 21.4 , LocalDate.now(), swimmer3));\n\n\n        swimmer6.addResult(new Result(SwimmingDiscipline.BREAST_STROKE, 512.4 , LocalDate.now(), swimmer3));\n        swimmer6.addResult(new Result(SwimmingDiscipline.BACK_CRAWL, 10.6, LocalDate.now(), swimmer3));\n        swimmer6.addResult(new Result(SwimmingDiscipline.BUTTERFLY, 200.4 , LocalDate.now(), swimmer3));\n\n\n        swimmer3.sortDisciplinesByPerformance();\n\n        System.out.println(swimmer3.getDisciplinesArray());\n\n\n        System.out.println(swimmer3.getDisciplinesArray().get(0).getShortName());\n\n        System.out.println(swimmer3);\n\n        List<CompetitiveSwimmer> swimmers = Arrays.asList(swimmer1,swimmer2,swimmer3, swimmer4, swimmer5, swimmer6);\n\n\n        CompetitiveSwimmer.printAllCompSwimmersBestDiscipline(swimmers);\n\n        System.out.println();\n\n        CompetitiveSwimmer.printTop5SwimmersByDiscipline(swimmers);\n\n        System.out.println();\n\n\n        Team competitveTeamSenior = new Team(\"Competitive Team Senior\", AgeCategory.SENIOR);\n        Team competitveTeamJunior = new Team(\"Competitive Team Junior\", AgeCategory.JUNIOR);\n\n        Team regularTeam = new Team(\"Casual Swimmers\");\n\n\n        regularTeam.addSwimmersToTeam(member1);\n        regularTeam.addSwimmersToTeam(member2);\n        regularTeam.addSwimmersToTeam(member3);\n\n\n\n        competitveTeamJunior.addSwimmersToTeam(member3);\n\n\n        competitveTeamJunior.addSwimmersToTeam(swimmer1);\n\n\n        competitveTeamJunior.addSwimmersToTeam(swimmer2);\n\n\n        competitveTeamSenior.addSwimmersToTeam(swimmer1);\n\n\n        competitveTeamSenior.addSwimmersToTeam(swimmer2);\n\n        competitveTeamSenior.addSwimmersToTeam(swimmer3);\n\n\n\n\n        System.out.println(regularTeam.displayAllMembers());\n\n\n        String fileName = \"members.txt\";\n        fileHandler.saveMembersToFile(members, fileName);\n\n        ArrayList<Member> loadedMembers = fileHandler.loadMembersFromFile(fileName);\n\n        for (Member member : loadedMembers){\n            System.out.println(member);\n        }\n\n        ui.startMenu();\n\n\n\n\n\n\n\n\n       /* //Test til member / ændring af medlemskabsaktivitet osv.\n            Member member = new Member(\n                    \"Hussain\",\n                    \"Ali\",\n                    LocalDate.of(2000, 12, 7),\n                    \"hussain.ali@example.com\",\n                    \"12345678\",\n                    \"Main Street 123\",\n                    \"M123\",\n                    MembershipStatus.ACTIVE\n            );\n\n            System.out.println(member.getMemberID());\n            System.out.println(member.getMembershipStatus());\n            member.changeMembershipToPassive();\n            System.out.println(member.getMembershipStatus());\n            System.out.println(member.getFirstName());\n            System.out.println(member.getDateOfBirth());\n            System.out.println(member.calculateAge()); */\n\n\n        System.out.println(member1);\n        System.out.println(member2);\n        System.out.println(member3);\n\n\n\n\n\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Main.java b/src/Main.java
--- a/src/Main.java	(revision 06b385c1e6361bdcf45f0e7909cda74d6b826b9b)
+++ b/src/Main.java	(date 1733404812356)
@@ -15,7 +15,7 @@
     public static void main(String[] args) {
 
         Controller controller = new Controller();
-        UserInterface ui = new UserInterface(controller);
+        UserInterface ui = new UserInterface();
         FileHandler fileHandler = new FileHandler();
         ArrayList<Member> members = new ArrayList<>();
 
@@ -81,7 +81,6 @@
 
         Team competitveTeamSenior = new Team("Competitive Team Senior", AgeCategory.SENIOR);
         Team competitveTeamJunior = new Team("Competitive Team Junior", AgeCategory.JUNIOR);
-
         Team regularTeam = new Team("Casual Swimmers");
 
 
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_21\" default=\"true\" project-jdk-name=\"21\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/out\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 06b385c1e6361bdcf45f0e7909cda74d6b826b9b)
+++ b/.idea/misc.xml	(date 1733401384765)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="21" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_X" default="true" project-jdk-name="21" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
